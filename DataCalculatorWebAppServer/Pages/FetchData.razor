@*This is the query page*@
@page "/fetchdata"
@using BlazorInputFile
@using Models
@using Data
@using Services
@using C1.Chart
@using C1.Blazor.Chart
@using Parser

@inject DataCalculatorDbContext _context 
@inject IFileHandler _fileHandler

<h1>Download file for query</h1>
<p>Enter starting year</p>
<input @bind="startDate">Enter starting year</input>
<p>Enter end year</p>
<input @bind="endDate">Enter final year</input>
<button @onclick = "() => MetaDataQuery(startDate,endDate)" >Click to begin</button>
<button @onclick = "() => ParseData(path)" >Query Data</button>
<p>@message</p>
@if (state == 1)
{
    <p>@message</p>
    <FlexChart Class="chart" ChartType="ChartType.Column"
    HeaderContent="Top Vulnerabilities in 2019" HeaderStyle="font-size:24px"
    LegendPosition="Position.Bottom" LegendStyle="font-size:18px"
    BindingX="name" ItemsSource="display">
        <SeriesCollection>
            <Series Name="count" Binding="count" />
        </SeriesCollection>
        <Label>
            <DataLabel Position="LabelPosition.Top" Content="{value}"/>
        </Label>
    </FlexChart>
}
    

@code{
    string startDate = "";
    string endDate = "";

    string message = "";
    int state = 0;

    List<object> display { get; set; }

    DataParser p = new DataParser();

    string path = @"C:\Users\aj_ch\Documents\College\CSCI 4712\nvdcve-1.1-2017.json";

    private void ParseData(string path)
    {
        message = "Data is parsing";
        display = p.QueryFile(path);
        state = 1;
        message = "Data has parsed";
    }

    private void MetaDataQuery(string startingQueryDate, string endingQueryDate )
    {
        Console.WriteLine(startingQueryDate + endingQueryDate);        
        string[] fileNames = {"nvdcve-1.1-2019.json", "nvdcve-1.1-2021.json"};// Query MongoDb for all file names from start to end year and store in fileNames
        DownloadFile(fileNames);
    }

    private async Task DownloadFile(string[] fileList)
    {
        foreach(var fiName in fileList)
        {
           var file = await _fileHandler.DownloadFileAsync(fiName);
           SaveData(file);
        }
    }

    protected bool SaveData(TransferFile byteFile)
    {
        BinaryWriter Writer = null;
        string Name = @"C:.\Downloads\";

        try
        {
            Writer = new BinaryWriter(File.OpenWrite(Name + byteFile.Name));              
            Writer.Write(byteFile.Content);
            Writer.Flush();
            Writer.Close();
        }
        catch 
        {
            return false;
        }

        return true;
    }
    
}
